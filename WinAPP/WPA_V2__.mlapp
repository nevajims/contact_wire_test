classdef WPA_V2 < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                       matlab.ui.Figure
        Sentinal_LabelVAL2             matlab.ui.control.Label
        USERLabel_val2                 matlab.ui.control.Label
        PredictionLamp                 matlab.ui.control.Lamp
        PredictionLampLabel            matlab.ui.control.Label
        CheckProcessLamp               matlab.ui.control.Lamp
        CheckProcessLampLabel          matlab.ui.control.Label
        DataloadedLamp                 matlab.ui.control.Lamp
        DataloadedLampLabel            matlab.ui.control.Label
        LoginLamp                      matlab.ui.control.Lamp
        LoginLampLabel                 matlab.ui.control.Label
        SentinalLabel_2                matlab.ui.control.Label
        UserLabel                      matlab.ui.control.Label
        Program_version_label          matlab.ui.control.Label
        CONTACTWireTestLabel           matlab.ui.control.Label
        TabGroup                       matlab.ui.container.TabGroup
        LoginTab                       matlab.ui.container.Tab
        Level_label_val                matlab.ui.control.Label
        LevelLabel                     matlab.ui.control.Label
        Sentinal_label_val             matlab.ui.control.Label
        Cur_Log_in_Label_Val           matlab.ui.control.Label
        SentinalLabel                  matlab.ui.control.Label
        CurrentlyloggedinLabel         matlab.ui.control.Label
        LOGINButton                    matlab.ui.control.Button
        TestSettingsTab                matlab.ui.container.Tab
        GetTransducerDetailsButton     matlab.ui.control.Button
        TestSettingsButton             matlab.ui.control.Button
        ClearCurrentDataButton         matlab.ui.control.Button
        Notes_val                      matlab.ui.control.Label
        Test_DandT_val                 matlab.ui.control.Label
        Cur_dat_set_val                matlab.ui.control.Label
        NotesLabel                     matlab.ui.control.Label
        TestDateandTimeLabel           matlab.ui.control.Label
        CurrentDataSetLabel            matlab.ui.control.Label
        LoadExistingDataButton         matlab.ui.control.Button
        RunNewTestButton               matlab.ui.control.Button
        CheckProcessTab                matlab.ui.container.Tab
        ClearprocesseddataButton       matlab.ui.control.Button
        SignalQualityIndicatorsButton  matlab.ui.control.Button
        ChanTimeandFreqViewerButton    matlab.ui.control.Button
        DisplaySNRBarChartsButton      matlab.ui.control.Button
        SNRSettingsButton              matlab.ui.control.Button
        DisplaySNRMapsButton           matlab.ui.control.Button
        ProcessDataButton              matlab.ui.control.Button
        CheckSignalQualityButton       matlab.ui.control.Button
        PredictionTab                  matlab.ui.container.Tab
        ProduceareportButton           matlab.ui.control.Button
        Label_PL                       matlab.ui.control.Label
        PeakLocationmmLabel            matlab.ui.control.Label
        MPRCvsTagButton                matlab.ui.control.Button
        ClearPredictionsButton         matlab.ui.control.Button
        ModeMapTagsButton              matlab.ui.control.Button
        PLamp                          matlab.ui.control.Lamp
        PLampLabel                     matlab.ui.control.Label
        ShowDispersionButton           matlab.ui.control.Button
        ShowMeshButton                 matlab.ui.control.Button
        DistanceMeanTableButton        matlab.ui.control.Button
        LogLikelyhoodTableButton       matlab.ui.control.Button
        InteractiveMMViewerButton      matlab.ui.control.Button
        ShowPeakFindButton             matlab.ui.control.Button
        ViewModeMapButton              matlab.ui.control.Button
        MeanSTDmodesButton             matlab.ui.control.Button
        PredsButton                    matlab.ui.control.Button
        PREDICTIONButton               matlab.ui.control.Button
        ModePairViewerFDButton         matlab.ui.control.Button
        SetPredictionOptionsButton     matlab.ui.control.Button
    end

    
    properties (Access = private)
        Property % Description
    location_of_default_options =  '\SETTINGS_FILES\default_options2.mat';
    
    current_test_folder         =  '';

    slab_root     = [getenv('systemDrive'),getenv('homePath')];
    settings_root = [getenv('APPDATA')];
    
default_option_fields       =  {'raw_data_file_options';...
                                'raw_data_file_type';...
                                'login_options_fname';...
                                'plot_options_fname';...
                                'snr_settings_fname';...
                                'test_parameters_fname';...
                                'Test_Settings_fname';...
                                'proc_options_fname';...        
                                'raw_data_file_path';...
                                'login_options_fields';...
                                'plot_options_fields';...
                                'snr_settings_fields';...
                                'test_parameters_fields';...
                                'Test_Settings_fields';...
                                'proc_options_fields'} ;

    default_options             = [];
    login_details               = []; 
    login_options               = [];
    plot_options                = [];
    snr_settings                = [];
    test_parameters             = [];
    Test_Settings               = [];
    proc_options                = [];
    test_parameters_choices     = [];
    test_data                   = [];
    rail_tester                 = [];
    status_                     =  1;        
    %status info
    have_test_data        =  0 ;  
    have_processed_data   =  0 ;
    login_level           =  0 ;
    prediction_done       =  0 ;  
    prediction_figure_handle = [] ; 
    %status info
    end
    
    
    methods (Access = private)
        
        function  get_status(app)
         if app.have_test_data == 0 && app.have_processed_data == 0 && app.prediction_done ==0
         app.status_ = 1 ;
         elseif  app.have_test_data == 1 && app.have_processed_data == 0 && app.prediction_done ==0
         app.status_ = 2 ;             
         elseif  app.have_test_data == 1 && app.have_processed_data == 1 && app.prediction_done ==0
         app.status_ = 3 ;
         elseif  app.have_test_data == 1 && app.have_processed_data == 1 && app.prediction_done ==1
         app.status_ = 4 ;
         else
         app.status_ = 1 ;
         msgbox ('Status Unclear - check')
         end  % if app.have_test_data   ........

        end %        function  get_status(app)
        
        function set_status(app)
            
        switch(app.status_)  
            case(1)
            set_Tab_2(app,1)
            set_Tab_3(app,0)
            set_Tab_4(app,0)
            set_3lights(app,[0 0 0])
            if ishandle(app.prediction_figure_handle)
                close(app.prediction_figure_handle)
                app.prediction_figure_handle = [] ;
            end %if ishandle(app.prediction_figure_handle)

            
            case(2)
            set_Tab_2(app,0)
            set_Tab_3(app,1)
            set_Tab_4(app,0)
            set_3lights(app,[1 0 0])
            if ishandle(app.prediction_figure_handle)
                close(app.prediction_figure_handle)
                app.prediction_figure_handle = [] ;
            end %if ishandle(app.prediction_figure_handle)


            case(3)
            set_Tab_2(app,0)
            set_Tab_3(app,0)
            set_Tab_4(app,1)  % P light off    /   prediction on
            set_3lights(app,[1 1 0])

            case(4)
            set_Tab_2(app,0)
            set_Tab_3(app,0)
            set_Tab_4(app,2)  % P light on     /  prediction off 
            set_3lights(app,[1 1 1])

        end %switch(app.status_)  
        end %function set_status(app)
        
        function set_Tab_2(app,switch_val)

           switch(switch_val)
               case(1)
               app.RunNewTestButton.Enable              ='on';  
               app.LoadExistingDataButton.Enable        = 'on';     
               app.TestSettingsButton.Enable            = 'on';
               GetTransducerDetailsButtonPushed.Enable  = 'on';
               case(0)
               app.RunNewTestButton.Enable            ='off';  
               app.LoadExistingDataButton.Enable     = 'off';      
               app.TestSettingsButton.Enable         = 'off';
               GetTransducerDetailsButtonPushed.Enable  = 'off';
           
           end %        function set_Tab_2(app,switch_val)
        end

         function set_Tab_3(app,switch_val)

           switch(switch_val)
               case(1)
                app.CheckSignalQualityButton.Enable  ='on'; 
                app.ProcessDataButton.Enable         ='on'; 
                app.DisplaySNRMapsButton.Enable      ='on';    
                app.DisplaySNRBarChartsButton.Enable ='on'; 
                app.ChanTimeandFreqViewerButton.Enable ='on'; 
                app.SignalQualityIndicatorsButton.Enable ='on';

               case(0)
                app.CheckSignalQualityButton.Enable  ='off'; 
                app.ProcessDataButton.Enable         ='off'; 
                app.DisplaySNRMapsButton.Enable      ='off';    
                app.DisplaySNRBarChartsButton.Enable ='off'; 
                app.ChanTimeandFreqViewerButton.Enable ='off'; 
                app.SignalQualityIndicatorsButton.Enable ='off'; 
                end   

           end %        function set_Tab_3(app,switch_val)

         function set_Tab_4(app,switch_val)

           switch(switch_val)
            
               case(0)
            app.PREDICTIONButton.Enable         ='off';
            app.ModePairViewerFDButton.Enable   ='off';
            app.ViewModeMapButton.Enable        ='off';
            app.ViewModeMapButton.Enable        ='off';
            app.PredsButton.Enable              ='off';
            app.ShowPeakFindButton.Enable       ='off';
            app.DistanceMeanTableButton.Enable  ='off';
            app.LogLikelyhoodTableButton.Enable ='off';
            app.LogLikelyhoodTableButton.Enable ='off'; 
            app.ModeMapTagsButton.Enable        ='off';
            app.ShowDispersionButton.Enable     ='off';
            app.ShowMeshButton.Enable           ='off';
            app.MeanSTDmodesButton.Enable       ='off';   
            app.InteractiveMMViewerButton.Enable='off';
            app.MPRCvsTagButton.Enable          ='off';
               case(1)
            app.PREDICTIONButton.Enable         ='on';
            app.ModePairViewerFDButton.Enable   ='on';
            app.ViewModeMapButton.Enable        ='on';
            app.ViewModeMapButton.Enable        ='on';
            app.PredsButton.Enable              ='on';
            app.ShowPeakFindButton.Enable       ='on';
            app.DistanceMeanTableButton.Enable  ='on';
            app.LogLikelyhoodTableButton.Enable ='on';
            app.LogLikelyhoodTableButton.Enable ='on'; 
            app.ModeMapTagsButton.Enable        ='on';
            app.ShowDispersionButton.Enable     ='on';
            app.ShowMeshButton.Enable           ='on';
            app.MeanSTDmodesButton.Enable       ='on';   
            app.InteractiveMMViewerButton.Enable='on';   
            app.MPRCvsTagButton.Enable          ='on';
                case(2)
            app.PREDICTIONButton.Enable         ='off';
            app.ModePairViewerFDButton.Enable   ='on';
            app.ViewModeMapButton.Enable        ='on';
            app.ViewModeMapButton.Enable        ='on';
            app.PredsButton.Enable              ='on';
            app.ShowPeakFindButton.Enable       ='on';
            app.DistanceMeanTableButton.Enable  ='on';
            app.LogLikelyhoodTableButton.Enable ='on';
            app.LogLikelyhoodTableButton.Enable ='on'; 
            app.ModeMapTagsButton.Enable        ='on';
            app.ShowDispersionButton.Enable     ='on';
            app.ShowMeshButton.Enable           ='on';
            app.MeanSTDmodesButton.Enable       ='on';   
            app.InteractiveMMViewerButton.Enable='on'; 
            app.MPRCvsTagButton.Enable          ='on';
           end   

           end %        function set_Tab_3(app,switch_val)
           
           function        set_3lights(app,switches_3)
           
            switch  switches_3(1)
                case(1)
                    app.DataloadedLamp.Color =   [0,1,0];
                case(0)
                    app.DataloadedLamp.Color =   [1,0,0];
            end

            switch  switches_3(2)
                case(1)
                    app.CheckProcessLamp.Color =   [0,1,0];
                case(0)
                    app.CheckProcessLamp.Color =   [1,0,0];
            end

           switch  switches_3(3)
               case(1)
                    app.PredictionLamp.Color  =   [0,1,0];
                case(0)
                    app.PredictionLamp.Color  =   [1,0,0];
            end

           end     %function        set_3lights(app,switches_3)


    end %methods (Access = private)

    

    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
       
           
       % TO DO 
       % DONE**** change files to mat files 
       % DONE**** start with default options and login details
       % DONE**** create the directies if they dont exist already 

       app.UIFigure.Icon='ICON2.png';
       app.UIFigure.Name = 'Traxion-NDT';

       if exist([app.settings_root,'\SETTINGS_FILES']) ~= 7  
       mkdir(app.settings_root)
       end %if exist([app.settings_root,'\SETTINGS_FILES']) ~= 7  
       
       if exist([app.slab_root,'\SLAB_data']) ~= 7
       mkdir([app.slab_root ,'\SLAB_data']) ; 
       end %if exist([getenv('systemDrive'),getenv('homePath'),'\SLAB_data']) ~= 7


            [app.default_options, ~]  =  load_mat_structure_from_file([pwd,app.location_of_default_options],app.default_option_fields) ; 


            if exist([app.settings_root,app.default_options.plot_options_fname ]) ~=2
            msgbox('copying plot_options file from installation to roaming')
            copyfile([pwd,app.default_options.plot_options_fname ],[app.settings_root,app.default_options.plot_options_fname ]); 
            else
            %msgbox('plot_options_fname  already exists in roaming ')                   
            end    %if exist([app.settings_root,app.default_options.plot_options_fname ]) ~=2
   
            if exist([app.settings_root,app.default_options.snr_settings_fname]) ~=2
            msgbox('copying snr_settings file from installation to roaming')
            copyfile([pwd,app.default_options.snr_settings_fname],[app.settings_root,app.default_options.snr_settings_fname]); 
            else
            %msgbox('snr_settings_fname already exists in roaming ')                   
            end    %if exist([app.settings_root,app.default_options.snr_settings_fname]) ~=2

            if exist([app.settings_root,app.default_options.test_parameters_fname]) ~=2
            msgbox('copying test_parameters file from installation to roaming')
            copyfile([pwd,app.default_options.test_parameters_fname],[app.settings_root,app.default_options.test_parameters_fname]); 
            else
            %msgbox('test_parameters_fname already exists in roaming ')                   
            end    %if exist([app.settings_root,app.default_options.test_parameters_fname]) ~=2

            if exist([app.settings_root,app.default_options.Test_Settings_fname]) ~=2
            msgbox('copying Test_Settings file from installation to roaming')
            copyfile([pwd,app.default_options.Test_Settings_fname],[app.settings_root,app.default_options.Test_Settings_fname]); 
            else
            %msgbox('Test_Settings_fname already exists in roaming ')                   
            end    %if exist([app.settings_root,app.default_options.Test_Settings_fname]) ~=2
                        
            if exist([app.settings_root,app.default_options. proc_options_fname]) ~=2
            msgbox('copying proc_options_fname file from installation to roaming')
            copyfile([pwd,app.default_options.proc_options_fname] , [app.settings_root,app.default_options.proc_options_fname]) ; 
            else
            %msgbox('proc_options_fname already exists in roaming ')                   
            end    %if exist([app.settings_root,app.default_options. proc_options_fname]) ~=2


      app.login_options        =    load_mat_structure_from_file([pwd,app.default_options.login_options_fname],...
                                    app.default_options.login_options_fields);                        
      
      app.plot_options         =    load_mat_structure_from_file([app.settings_root,app.default_options.plot_options_fname],...
                                    app.default_options.plot_options_fields);

      app.snr_settings         =    load_mat_structure_from_file([app.settings_root,app.default_options.snr_settings_fname],...
                                    app.default_options.snr_settings_fields);

      app.test_parameters      =    load_mat_structure_from_file([pwd,app.default_options.test_parameters_fname],...
                                    app.default_options.test_parameters_fields);
     
      app.Test_Settings        =    load_mat_structure_from_file([app.settings_root,app.default_options.Test_Settings_fname],...
                                    app.default_options.Test_Settings_fields);

      app.proc_options         =    load_mat_structure_from_file([app.settings_root,app.default_options.proc_options_fname],...
                                    app.default_options.proc_options_fields);

      app.LoginLamp.Color =   [1,0,0]; 

      
      
      app.get_status
      app.set_status
      app.RunNewTestButton.Enable    ='off';
      app.TestSettingsButton.Enable  = 'off';

      app.UIFigure.Units = 'normalized';
      app.UIFigure.Position = [0.6 0.45 0.3818 0.5120];
      app.UIFigure.Resize = 'Off';
 
      

        end

        % Button pushed function: LOGINButton
        function LOGINButtonPushed(app, event)
            
            
            switch(app.LOGINButton.Text)
                case('LOGIN')   

            %----------------------------------        
            if ishandle(app.prediction_figure_handle)
                close(app.prediction_figure_handle)
                app.prediction_figure_handle = [] ;
            end %if ishandle(app.prediction_figure_handle)

            app.prediction_done         =     0         ; 
            app.PLamp.Color             = [0.9,0.9,0.9] ; 
            app.get_status
            app.set_status
            
            app.Label_PL.Text           = '**';
            app.Label_PL.FontColor = [0 0 0];

            %---------------------------------- 

            app.login_details =login_window(app.login_options);  %run a seperate windows prog to get the login details
            
            if app.login_details.values_set  == 1
            
                app.Cur_Log_in_Label_Val.Text   =  app.login_details.Name                  ;
            app.USERLabel_val2.Text         =  app.login_details.Name                  ;  
            app.Sentinal_label_val.Text     =  num2str(app.login_details.Sentinal_no)   ;                
            app.Sentinal_LabelVAL2.Text     =  num2str(app.login_details.Sentinal_no)   ;                
                        
            switch(app.login_details.Level)
                case(1)
            app.Level_label_val.Text = 'Standard';
                case(2)
            app.Level_label_val.Text = 'Enhanced';
            end %  switch(app.login_details.Level)
            app.login_level  =  app.login_details.Level;
            app.LoginLamp.Color =   [0,1,0];
            app.LOGINButton.Text = 'LOGOUT' ;
            app.TabGroup.SelectedTab =  app.TestSettingsTab;
            app.RunNewTestButton.Enable           ='on';
            app.TestSettingsButton.Enable         = 'on';     



                        else
            % do nothing, possibly msgbox
            end %if app.login_details.values_set  == 1


                case('LOGOUT')
            
            %----------------------------------        
            if ishandle(app.prediction_figure_handle)
                close(app.prediction_figure_handle)
                app.prediction_figure_handle = [] ;
            end %if ishandle(app.prediction_figure_handle)

            app.prediction_done         =     0         ; 
            app.PLamp.Color             = [0.9,0.9,0.9] ; 
            app.get_status
            app.set_status
            app.Label_PL.Text           = '**';
            app.Label_PL.FontColor = [0 0 0];

            %----------------------------------

            app.LOGINButton.Text = 'LOGIN'                              ;  
            app.login_level = 0                                         ;
            app.login_details = []                                      ;
            
            app.Cur_Log_in_Label_Val.Text   =  'NONE'                   ;
            app.USERLabel_val2.Text         =  'NONE'                   ;  
            app.Sentinal_label_val.Text     =  'NONE'                   ;                
            app.Sentinal_LabelVAL2.Text     =  'NONE'                   ; 
            app.Level_label_val.Text        =  'UNSET'                  ;   
            app.LoginLamp.Color =   [1,0,0];    
            app.RunNewTestButton.Enable    ='off';
            app.TestSettingsButton.Enable         = 'off';     



             
            
            end %switch(app.LOGINButton.Text)
            
        end

        % Button pushed function: TestSettingsButton
        function TestSettingsButtonPushed(app, event)
            
     FDSF_temp   =   [pwd,app.default_options.Test_Settings_fname]                   ; 
     SF_temp     =   [app.settings_root,app.default_options.Test_Settings_fname]     ;
          
     switch (app.login_level)

            case(0)
            msgbox('you need to login to change') 
            dummy_ = []; 
            case(1)
            dummy_ = set_key_test_settings_BASICU(app.Test_Settings,FDSF_temp,SF_temp);  

            case(2)
            dummy_ = set_key_test_settings(app.Test_Settings,FDSF_temp,SF_temp); 
         otherwise
            dummy_ = []; 
            msgbox(['Unknown LL level: ',num2str(app.login_level)  ])

     end  % switch (app.login_level)
                       
            if isstruct(dummy_)
            app.Test_Settings = dummy_;
            end % if isstruct(dummy_)
            
        end

        % Button pushed function: RunNewTestButton
        function RunNewTestButtonPushed(app, event)

            %FDSF_temp   =   [pwd,app.default_options.Ttest_parameters_fname]                     ; 
            SF_temp     =   [app.settings_root,app.default_options.test_parameters_fname]         ;              
            
switch (app.login_level)

            case(0)
            msgbox('you need to login to do a test') 

            case{1,2}
            
if app.have_test_data ==0
    
            %if app.have_test_data ==0    
             
            %msgbox('this is the level 1/2 option')
            dummy__   = set_test_parameters_essential(app.test_parameters,SF_temp);
            
            if isstruct(dummy__)
               app.test_parameters_choices = dummy__;
           
            switch (app.test_parameters_choices.contact_wire)
                case('120')
             fixed_Operator_Settings.contact_wire_type_120_107 = 1;
                case('107')  
             fixed_Operator_Settings.contact_wire_type_120_107 = 2;                
                otherwise
             fixed_Operator_Settings.contact_wire_type_120_107 = 1;
            end
            % make this the operator name with no spaces
            % And the site name as the Structure ID

            dum1 = app.login_details.Name;
            dum1(find(dum1 ==' '))= '';

            dum2 = app.test_parameters_choices.Structure_ID;
            dum2(find(dum2==' '))= '';
         
            fixed_Operator_Settings.Name = dum1;
            fixed_Operator_Settings.Site_name = dum2;
            
            [Test_Settings_O] = convert_test_strct(app.Test_Settings ); 
            
            
            [raw_data,err] =  run_alva_DAQ(Test_Settings_O)                               ;
                      
                        
            if err==0
            clock_temp = fix(clock)  ;
            save_answer = questdlg('Would you like to Save the test data?', ...
	        'Options','Save','Dont Save','Save');
            switch (save_answer)
                case{'Save'}
            % results structure
            app.test_data.raw_data                 = raw_data                                                        ;
            app.test_data.fixed_Test_Settings      = Test_Settings_O                                                 ;  
            app.test_data.date_time                = clock_temp                                                      ;
            app.test_data.tester_details           =  app.login_details                                              ;
            app.test_data.test_parameters          =  app.test_parameters_choices                                    ;
            app.test_data.fixed_Operator_Settings = fixed_Operator_Settings                                          ;
            app.test_data.ver = '2.0'                                                                                ;
            app.test_data =   save_in_file_structure (app.slab_root, app.test_data,app.default_options)              ; 
            app.current_test_folder = app.test_data.file_with_path(1:max(find(app.test_data.file_with_path=='\')))   ;
            %--------------------------------------------------------------------------
            app.Cur_dat_set_val.Text    =    app.test_data.file_with_path( max((find(app.test_data.file_with_path=='\')))+1:end) ;
            app.Test_DandT_val.Text     =    string(datetime(app.test_data.date_time))                                           ;
            app.Notes_val.Text          =    ['ver',app.test_data.ver]                                                          ;  
            app.have_test_data = 1;
            app.get_status
            app.set_status
            app.TabGroup.SelectedTab = app.CheckProcessTab;

                case('Dont Save')

            % no need to do anything
            % nothing saves and no change in status

            end % switch (save_answer)
            end %  if err==0
            
            else
            msgbox('esc no test')

            end %if isstruct(dummy_)
            
     else
     msgbox('Clear current data first' )


end % if app.have_test_data ==0


end  % switch (app.login_level)

        end

        % Button pushed function: LoadExistingDataButton
        function LoadExistingDataButtonPushed(app, event)

%   all levels including (0)  should be able to load old data and analyse it     
%   needs to differentiate between newand old data V1.0 and v2.0

if  app.have_test_data == 0
dummy_ = app.default_options.raw_data_file_path ;
[file_,path_, ok_] = uigetfile([app.slab_root ,dummy_ , '\*.mat']);

if ok_ ==1

file_with_path  = [path_,file_];
dummy__ = load(file_with_path);

if isfield(dummy__,'test_data')

app.test_data = dummy__.test_data ;    

if length(fields(app.test_data)) == 5  && isfield(app.test_data,'raw_data')&& isfield(app.test_data,'fixed_Test_Settings') &&...
isfield(app.test_data,'fixed_Operator_Settings')&& isfield(app.test_data,'file_with_path') && isfield(app.test_data,'date_time')  
% msgbox('This is legacy data-  with the old fixed_test_settings and fixed_operator_settings ')    
ver_insert_tmp = 'Ver1.0 (legacy)';

%elseif  -  new format check in here
else
%need a check here
%msgbox('Warning format not recognised - check ')

ver_insert_tmp = 'Ver2.0';
end

%----------------------------------------------------------------
% assignents 
%----------------------------------------------------------------
% GUI display assignments----------------------------------------

app.Cur_dat_set_val.Text    =    app.test_data.file_with_path( max((find(app.test_data.file_with_path=='\')))+1:end);
app.Test_DandT_val.Text     =    string(datetime(app.test_data.date_time))           ;
app.Notes_val.Text          =    ver_insert_tmp                                      ;  

% structure assignments------------------------------------------
app.current_test_folder = path_;
app.have_test_data      = 1    ; 
            
app.get_status
app.set_status
app.TabGroup.SelectedTab = app.CheckProcessTab;

% status assignments---------------------------------------------
% app.current_status = 2;
% app.Set_Status();
%------------------------------------------------------------------------------------

else
msgbox('The file is not the correct format needs to have a field')
end %if isfield(dummy__,'test_data')
end  % if ok_ ==1
else
msgbox('Clear current data first' )
end

        
% modified fromold code in WireProApp (1.0) ::

        end

        % Button pushed function: ClearCurrentDataButton
        function ClearCurrentDataButtonPushed(app, event)
 
            app.test_data               =    []         ;
            app.Cur_dat_set_val.Text    =    ''         ;
            app.Test_DandT_val.Text     =    ''         ;
            app.Notes_val.Text          =    ''         ;  
            app.current_test_folder     =    []         ;
            app.rail_tester             =    []         ;
            app.have_test_data          =     0         ; 
            app.have_processed_data     =     0         ;
            app.prediction_done         =     0         ; 
            app.PLamp.Color             = [0.9,0.9,0.9] ; 
            app.get_status
            app.set_status
            
            app.Label_PL.Text           = '**';
            app.Label_PL.FontColor = [0 0 0];


            if app.login_level == 0
            app.RunNewTestButton.Enable    ='off';
            end 
              

        end

        % Button pushed function: CheckSignalQualityButton
        function CheckSignalQualityButtonPushed(app, event)
            % To be worked out
            snr_settings_O = convert_to_snr_struct(app.snr_settings);

            if isstruct(app.test_data)  
            rejection_indicators   = plot_SNR_Raw(app.test_data,[0,0,0,0],snr_settings_O);
                     
           
            if length(find(rejection_indicators(1,:)<4)) 
            RMS_msg = ['Warning RMS flags on channels:'  num2str((find(rejection_indicators(1,:)<4))) ] ;   
            else
            RMS_msg = 'RMS flags OK'  ;
            end %if length(find(rejection_indicators(2,:)<3))  >0
            
            if length(find(rejection_indicators(2,:)<3)) 
            SNR_msg = ['Warning SNR flags on channels:'  num2str((find(rejection_indicators(2,:)<4))) ] ;   
            else
            SNR_msg = 'SNR flags OK'  ;
            end %if length(find(rejection_indicators(2,:)<3))  >0
            
            if length(find(rejection_indicators(3,:)<4)) 
            LFN_msg = ['Warning LFN flags on channels:'  num2str((find(rejection_indicators(3,:)<4))) ] ;   
            else
            LFN_msg = 'LFN flags OK'  ;
            end %if length(find(rejection_indicators(2,:)<3))  >0
            
            if length(find(rejection_indicators(4,:)<4)) 
            HFN_msg = ['Warning HFN flags on channels:'  num2str((find(rejection_indicators(4,:)<4))) ] ;   
            else
            HFN_msg = 'HFN flags OK'  ;
            end %if length(find(rejection_indicators(2,:)<3))  >0
                       

            msgbox({RMS_msg,SNR_msg,LFN_msg,HFN_msg})   
            end %if isstruct(app.test_data)  

        end

        % Button pushed function: DisplaySNRMapsButton
        function DisplaySNRMapsButtonPushed(app, event)
            %plot_list =   {'Maps','Bar Charts','indicators','time_freq_traces' } 
            
            if isstruct(app.test_data)  
            snr_settings_O = convert_to_snr_struct(app.snr_settings);
            [~]   = plot_SNR_Raw(app.test_data,[1,0,0,0],snr_settings_O); 
            end %if isstruct(app.test_data)  
            
        end

        % Button pushed function: ProcessDataButton
        function ProcessDataButtonPushed(app, event)
          if isstruct(app.test_data)           
 
          [app.rail_tester,loaded_fe_file_ok ] =  create_rail_tester_structure(app.default_options,app.test_data,app.proc_options);
          
          if loaded_fe_file_ok~= 1
          msgbox('warning issue with fe file loading- cant process')
          else
          app.rail_tester                                =  fn_process_rail_data(app.rail_tester, app.proc_options);
          
          if isstruct(app.rail_tester)
          app.have_processed_data = 1;
          end %if isstruct(app.rail_tester)
          
          end %if loaded_fe_file_ok~= 1
                    
            app.get_status
            app.set_status
          app.TabGroup.SelectedTab = app.PredictionTab ;

          end %if isstruct(app.test_data)

          % fit thisinto the next window 
          % txt_ = app.plot_options2.Data_path_options{app.plot_options2.Data_path_choice};    
          % app.Learning_set_Label.Text = ['PREDICTION DB: ',txt_(max(find(txt_=='\'))+1:end),'.'];
          % app.Set_Status();
%}

        end

        % Button pushed function: SetPredictionOptionsButton
        function SetPredictionOptionsButtonPushed(app, event)
            
             FDSF_temp             =   [pwd,app.default_options.plot_options_fname]                    ; 
             SF_temp               =   [app.settings_root,app.default_options.plot_options_fname]      ;
 
            switch (app.login_level)

                 case{0,1}    
              dummy_ =  set_plot_options_BASICU(app.plot_options,FDSF_temp,SF_temp); 
                 case(2)
              dummy_  =  set_plot_options(app.plot_options,FDSF_temp,SF_temp); 
             
            end %switch (app.login_level)
              
              if isstruct(dummy_)
              app.plot_options = dummy_;
              end
            
        end

        % Button pushed function: ModePairViewerFDButton
        function ModePairViewerFDButtonPushed(app, event)
            if isstruct(app.rail_tester)   
            plot_options_O  = convert_plot_options2_old_strct(app.plot_options);

            proc_file.rail_tester  =  app.rail_tester;
            proc_file.test_data    =  app.test_data  ;
            settings_               = plot_options_O; 

            do_plots = [0 1 0 0 0 0 0 0 0 0 0 0];
            LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
            
            [~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);        
            end %if isstruct(app.rail_tester)   
            
        end

        % Button pushed function: PREDICTIONButton
        function PREDICTIONButtonPushed(app, event)
                        
             if isstruct(app.rail_tester)    

             proc_file.rail_tester  =  app.rail_tester;
             proc_file.test_data    =  app.test_data  ;
             plot_options_O  = convert_plot_options2_old_strct(app.plot_options);
             
             settings_              = plot_options_O;
             
             snr_settings_O = convert_to_snr_struct(app.snr_settings);
             rejection_indicators   =  plot_SNR_Raw(app.test_data,[0,0,0,0],snr_settings_O);
      
             do_plots   = [0 0 0 0 0 0 0 0 0 0 0 0];  
             LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
             [~,PL_inf,~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);  
             [T_num]= find(rejection_indicators(2,:)==1);
             do_the_prediction = 0 ; 

             if isempty(T_num) ==1 && PL_inf.DV(PL_inf.mod_val) > 0.7
             do_the_prediction = 1;

             else
             %do different depending on login status    
             %login_level  

             if app.login_level == 2
              ans_ = questdlg({['Poor Signal/Noise on ',num2str(length(T_num)), ' Channels (',num2str(T_num),')- check contact.'],'See Prediction anyway?',},'ALERT' ,'Yes','No','Yes');
             
             if ~isempty(ans_)
             switch(ans_)
                 case('Yes')
             do_the_prediction = 1;
             end % if ~isempty(ans_)
             end
             
             else
             
             if PL_inf.DV(PL_inf.mod_val) < 0.7
             dum1_ = msgbox(['location of peak appears too low(',num2str(round(1000*PL_inf.DV(PL_inf.mod_val))),' mm)']);                 
             end
             
             if ~isempty(T_num) 
             dum2_  = msgbox(['Poor Signal/Noise on ',num2str(length(T_num)), ' Channels (',num2str(T_num),')- check contact.']);  
             end

             end %if app.login_level == 2

             end %if isempty(T_num) ==1    

             if do_the_prediction == 1  
              
             do_plots   = [0 0 0 0 0 0 0 0 0 1 0 0];  
             LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
             [pred_,PL_inf,PFH] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);  
             app.prediction_figure_handle = PFH;
             app.Label_PL.Text = num2str(floor(10000*PL_inf.DV(PL_inf.mod_val))/10);
                          
             if PL_inf.DV(PL_inf.mod_val) > 0.7
             app.Label_PL.FontColor = [0 1 0];
             else
             app.Label_PL.FontColor = [1 0 0];    
             end

             c_index = pred_.colours(pred_.pred_value);
             RGB_colours = [0,1,0;1 0.7 0 ;1,0,0];
             app.PLamp.Color = RGB_colours(c_index,:);
             app.prediction_done  = 1 ;
             app.get_status
             app.set_status
             
             end %if do_the_prediction == 1;  

             



           
            
            end %if isstruct(app.rail_tester)   
             
        end

        % Button pushed function: SNRSettingsButton
        function SNRSettingsButtonPushed(app, event)
            %  also  only visable for level 2
            
            switch (app.login_level)
                case{0,1}    
             msgbox('Settings only availible for advanced user')                     
                 case(2)
             FDSF_temp             =   [pwd,app.default_options.snr_settings_fname]                    ; 
             SF_temp               =   [app.settings_root,app.default_options.snr_settings_fname]      ;
             dummy_      =   set_SNR_settings(app.snr_settings,FDSF_temp,SF_temp)            ;
            
             if isstruct(dummy_)
             app.snr_settings = dummy_;
             end
                         

            end %switch (app.login_level)

        end

        % Button pushed function: DisplaySNRBarChartsButton
        function DisplaySNRBarChartsButtonPushed(app, event)
            %plot_list =   {'Maps','Bar Charts','indicators','time_freq_traces' } 
            
            if isstruct(app.test_data)  
            snr_settings_O = convert_to_snr_struct(app.snr_settings);
            [~]   = plot_SNR_Raw(app.test_data,[0,1,0,0],snr_settings_O); 
            end %if isstruct(app.test_data)  
            
        end

        % Button pushed function: ChanTimeandFreqViewerButton
        function ChanTimeandFreqViewerButtonPushed(app, event)
            %plot_list =   {'Maps','Bar Charts','indicators','time_freq_traces' } 
            
            if isstruct(app.test_data)  
            snr_settings_O = convert_to_snr_struct(app.snr_settings);
            [~]   = plot_SNR_Raw(app.test_data,[0,0,0,1],snr_settings_O); 
            end %if isstruct(app.test_data)  
        end

        % Button pushed function: SignalQualityIndicatorsButton
        function SignalQualityIndicatorsButtonPushed(app, event)
            %plot_list =   {'Maps','Bar Charts','indicators','time_freq_traces' } 
            
            if isstruct(app.test_data)  
            snr_settings_O = convert_to_snr_struct(app.snr_settings);
            [~]   = plot_SNR_Raw(app.test_data,[0,0,1,0],snr_settings_O); 
                        
            end %if isstruct(app.test_data)  
        end

        % Button pushed function: ViewModeMapButton
        function ViewModeMapButtonPushed(app, event)
            if isstruct(app.rail_tester)   
            plot_options_O  = convert_plot_options2_old_strct(app.plot_options);

            proc_file.rail_tester  =  app.rail_tester;
            proc_file.test_data    =  app.test_data  ;
            settings_               = plot_options_O; 

           %do_plots = [0 0 1 0 0 0 0 0 0 0];
            do_plots = [0 0 1 0 0 0 0 0 0 0 0 0];
            
            LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
            
            [~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);        
            end %if isstruct(app.rail_tester)   
            
        end

        % Button pushed function: MeanSTDmodesButton
        function MeanSTDmodesButtonPushed(app, event)
            if isstruct(app.rail_tester)   
            plot_options_O  = convert_plot_options2_old_strct(app.plot_options);

            proc_file.rail_tester  =  app.rail_tester;
            proc_file.test_data    =  app.test_data  ;
            settings_               = plot_options_O; 

            
            do_plots = [0 0 0 1 0 0 0 0 0 0 0 0];
            
            LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
            
            [~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);        
            end %if isstruct(app.rail_tester)   
            
        end

        % Button pushed function: PredsButton
        function PredsButtonPushed(app, event)
            if isstruct(app.rail_tester)   
            plot_options_O  = convert_plot_options2_old_strct(app.plot_options);

            proc_file.rail_tester  =  app.rail_tester;
            proc_file.test_data    =  app.test_data  ;
            settings_               = plot_options_O; 

            
            do_plots = [0 0 0 0 0 0 1 0 0 0 0 0];
            
            LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
            
            [~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);        
            end %if isstruct(app.rail_tester)
        end

        % Button pushed function: ShowPeakFindButton
        function ShowPeakFindButtonPushed(app, event)
             if isstruct(app.rail_tester)   
            plot_options_O  = convert_plot_options2_old_strct(app.plot_options);

            proc_file.rail_tester  =  app.rail_tester;
            proc_file.test_data    =  app.test_data  ;
            settings_               = plot_options_O; 
            
            %do_plots = [1 0 0 0 0 0 0 0 0 0];
            do_plots =  [1 0 0 0 0 0 0 0 0 0 0 0];  
            
            LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
            
            [~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);        
            end %if isstruct(app.rail_tester)
        end

        % Button pushed function: DistanceMeanTableButton
        function DistanceMeanTableButtonPushed(app, event)
            if isstruct(app.rail_tester)   
            plot_options_O  = convert_plot_options2_old_strct(app.plot_options);

            proc_file.rail_tester  =  app.rail_tester;
            proc_file.test_data    =  app.test_data  ;
            settings_               = plot_options_O; 

            %do_plots = [0 0 0 0 0 0 0 1 0 0];
            do_plots =  [0 0 0 0 0 0 0 1 0 0 0 0];  
            LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
            
            [~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);        
            end %if isstruct(app.rail_tester)
        end

        % Button pushed function: LogLikelyhoodTableButton
        function LogLikelyhoodTableButtonPushed(app, event)
             if isstruct(app.rail_tester)   
            plot_options_O  = convert_plot_options2_old_strct(app.plot_options);

            proc_file.rail_tester  =  app.rail_tester;
            proc_file.test_data    =  app.test_data  ;
            settings_               = plot_options_O; 

            %do_plots = [0 0 0 0 0 0 0 0 1 0];
            do_plots =  [0 0 0 0 0 0 0 0 1 0 0 0];  
            LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
            
            [~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);        
            end %if isstruct(app.rail_tester)
        end

        % Button pushed function: InteractiveMMViewerButton
        function InteractiveMMViewerButtonPushed(app, event)
            if isstruct(app.rail_tester)   
            plot_options_O  = convert_plot_options2_old_strct(app.plot_options);

            proc_file.rail_tester  =  app.rail_tester;
            proc_file.test_data    =  app.test_data  ;
            settings_               = plot_options_O; 

            %do_plots = [0 0 0 0 1 0 0 0 0 0];
            do_plots =  [0 0 0 0 1 0 0 0 0 0 0 0];  
            
            LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
            
            [~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);        
            end %if isstruct(app.rail_tester)
        end

        % Button pushed function: ShowDispersionButton
        function ShowDispersionButtonPushed(app, event)
            if isstruct(app.rail_tester)
            plot_options_O  = convert_plot_options2_old_strct(app.plot_options);
            showdispersion(plot_options_O,app.rail_tester);
            end% if isstruct(app.rail_tester) 
        end

        % Button pushed function: ShowMeshButton
        function ShowMeshButtonPushed(app, event)
            if isstruct(app.rail_tester)
            show_mesh(app.rail_tester);
            end%if isstruct(app.rail_tester)            
        end

        % Button pushed function: ModeMapTagsButton
        function ModeMapTagsButtonPushed(app, event)
            if isstruct(app.rail_tester)   
            plot_options_O  = convert_plot_options2_old_strct(app.plot_options);

            proc_file.rail_tester  =  app.rail_tester;
            proc_file.test_data    =  app.test_data  ;
            settings_               = plot_options_O; 

            %do_plots = [0 0 0 0 0 1 0 0 0 0];
            do_plots =  [0 0 0 0 0 1 0 0 0 0 0 0];  
            LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
            
            [~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);        
            end %if isstruct(app.rail_tester)
        end

        % Button pushed function: ClearPredictionsButton
        function ClearPredictionsButtonPushed(app, event)
            
            

            if ishandle(app.prediction_figure_handle)
                close(app.prediction_figure_handle)
                app.prediction_figure_handle = [] ;
            end %if ishandle(app.prediction_figure_handle)
            
            app.Label_PL.Text           = '**';
            app.Label_PL.FontColor = [0 0 0];

            app.prediction_done         =     0         ; 
            app.PLamp.Color             = [0.9,0.9,0.9] ; 
            app.get_status
            app.set_status

        end

        % Button pushed function: ClearprocesseddataButton
        function ClearprocesseddataButtonPushed(app, event)
            app.rail_tester             =    []         ;
            
            if ishandle(app.prediction_figure_handle)
                close(app.prediction_figure_handle)
                app.prediction_figure_handle = [] ;
            end %if ishandle(app.prediction_figure_handle)
            
            app.Label_PL.Text           = '**';
            app.Label_PL.FontColor = [0 0 0];

            app.have_processed_data     =     0         ;
            app.prediction_done         =     0         ; 
            app.PLamp.Color             = [0.9,0.9,0.9] ;
            app.get_status
            app.set_status
        end

        % Button pushed function: MPRCvsTagButton
        function MPRCvsTagButtonPushed(app, event)
            if isstruct(app.rail_tester)   
            plot_options_O  = convert_plot_options2_old_strct(app.plot_options);

            proc_file.rail_tester  =  app.rail_tester;
            proc_file.test_data    =  app.test_data  ;
            settings_               = plot_options_O; 

            do_plots =  [0 0 0 0 0 0 0 0 0 0 0 1];  
            LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
           
            [~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF) ;        

            end %if isstruct(app.rail_tester)
        end

        % Button pushed function: GetTransducerDetailsButton
        function GetTransducerDetailsButtonPushed(app, event)
           
            if app.have_test_data == 1
            display_trans_positions(app.test_data.fixed_Test_Settings,'from when the test was done')
            else
            display_trans_positions(app.Test_Settings,'current instrument settings')                      
            end %if have_test_data == 1
           
        end

        % Button pushed function: ProduceareportButton
        function ProduceareportButtonPushed(app, event)
                        
            %  ----------------------------------------------------------
            %  Save in a directory   --   (where the results are) / Reports. 
            %  Save in a date file structure as in the results            
            %  ----------------------------------------------------------
            %  Only if a prediction has been made already
            %  app.prediction_done
            %  Produce_Test_report(       );            
            %  exportgraphics(f,'AnnotatedPlot.pdf')
            % ----------------------------------------------------------

 if isstruct(app.rail_tester)    
             proc_file.rail_tester  =  app.rail_tester;
             proc_file.test_data    =  app.test_data  ;
             plot_options_O  = convert_plot_options2_old_strct(app.plot_options);
             
             settings_              = plot_options_O;
             
             snr_settings_O = convert_to_snr_struct(app.snr_settings);
             rejection_indicators   =  plot_SNR_Raw(app.test_data,[0,0,0,0],snr_settings_O);

             do_plots   = [0 0 0 0 0 0 0 0 0 0 0 0];  
             
             LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
             
             [PREDICTION_,PL_inf,~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);  
             
             [T_num]= find(rejection_indicators(2,:)==1);
             do_the_prediction = 0 ; 
             %app.test_parameters_choices

             
             if isempty(T_num) ==1 && PL_inf.DV(PL_inf.mod_val) > 0.7
             do_the_prediction = 1;
             else
             % to be decided here
             do_the_prediction = 0;
             end %if isempty(T_num) ==1 && PL_inf.DV(PL_inf.mod_val) > 0.7

                          Produce_Test_report(do_the_prediction , proc_file  ,  rejection_indicators , PL_inf , T_num, PREDICTION_ )
              
 
 end % if isstruct(app.rail_tester)    

%{
 if isstruct(app.rail_tester)    

             proc_file.rail_tester  =  app.rail_tester;
             proc_file.test_data    =  app.test_data  ;
             plot_options_O  = convert_plot_options2_old_strct(app.plot_options);
             settings_              = plot_options_O;
             snr_settings_O = convert_to_snr_struct(app.snr_settings);
             rejection_indicators   =  plot_SNR_Raw(app.test_data,[0,0,0,0],snr_settings_O);
      
             do_plots   = [0 0 0 0 0 0 0 0 0 0 0 0];  
             LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
             [~,PL_inf,~] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);  
             [T_num]= find(rejection_indicators(2,:)==1);
             do_the_prediction = 0 ; 



             if isempty(T_num) ==1 && PL_inf.DV(PL_inf.mod_val) > 0.7
             do_the_prediction = 1;

             else
             %do different depending on login status    
             %login_level  

             if app.login_level == 2
              ans_ = questdlg({['Poor Signal/Noise on ',num2str(length(T_num)), ' Channels (',num2str(T_num),')- check contact.'],'See Prediction anyway?',},'ALERT' ,'Yes','No','Yes');
             
             if ~isempty(ans_)
             switch(ans_)
                 case('Yes')
             do_the_prediction = 1;
             end % if ~isempty(ans_)
             end
             else
             if PL_inf.DV(PL_inf.mod_val) < 0.7
             dum1_ = msgbox(['location of peak appears too low(',num2str(round(1000*PL_inf.DV(PL_inf.mod_val))),' mm)']);                 
             end
             

             if ~isempty(T_num) 
             dum2_  = msgbox(['Poor Signal/Noise on ',num2str(length(T_num)), ' Channels (',num2str(T_num),')- check contact.']);  
             end
             end %if app.login_level == 2
             end %if isempty(T_num) ==1    


             if do_the_prediction == 1  
              
             do_plots   = [0 0 0 0 0 0 0 0 0 1 0 0];  
             LF = [pwd,settings_.Data_path_options{settings_.Data_path_choice}];
             [pred_,PL_inf,PFH] = plot_predict_processed(proc_file, settings_ ,do_plots, LF);  
             

             app.prediction_figure_handle = PFH;
             
             app.Label_PL.Text = num2str(floor(10000*PL_inf.DV(PL_inf.mod_val))/10);
             
             if PL_inf.DV(PL_inf.mod_val) > 0.7
             app.Label_PL.FontColor = [0 1 0];
             else
             app.Label_PL.FontColor = [1 0 0];    
             end

             c_index = pred_.colours(pred_.pred_value);
             RGB_colours = [0,1,0;1 0.7 0 ;1,0,0];
             app.PLamp.Color = RGB_colours(c_index,:);
             app.prediction_done  = 1 ;
             app.get_status
             app.set_status
             
             end %if do_the_prediction == 1;  

%}


        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)
            Pix_SS = get(0,'screensize');
            x_mult = Pix_SS(3)/1920;
            y_mult = Pix_SS(4)/1080;
    

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Color = [1 1 1];
            app.UIFigure.Position = [x_mult*100 y_mult*100 x_mult*733 y_mult*553];
            app.UIFigure.Name = 'MATLAB App';

            % Create TabGroup
            app.TabGroup = uitabgroup(app.UIFigure);
            app.TabGroup = uitabgroup(app.UIFigure,'Position',[x_mult*1 y_mult*67 x_mult*734 y_mult*442]);
            % 'InnerPosition',[x_mult*2 y_mult*45 x_mult*487 y_mult*271]

            % Create LoginTab
            %app.LoginTab = uitab(app.TabGroup,'Position',[x_mult*1 y_mult*1 x_mult*487 y_mult*270]);
            app.LoginTab = uitab(app.TabGroup);
            app.LoginTab.Title = 'Login';
            %app.LoginTab.OuterPosition  

            % Create LOGINButton
            app.LOGINButton = uibutton(app.LoginTab, 'push');
            app.LOGINButton.ButtonPushedFcn = createCallbackFcn(app, @LOGINButtonPushed, true);
            app.LOGINButton.FontSize = y_mult*36;
            app.LOGINButton.Position = [x_mult*31 y_mult*291 x_mult*191 y_mult*97];
            app.LOGINButton.Text = 'LOGIN';

            % Create CurrentlyloggedinLabel
            app.CurrentlyloggedinLabel = uilabel(app.LoginTab);
            app.CurrentlyloggedinLabel.FontSize = y_mult*18;
            app.CurrentlyloggedinLabel.Position = [x_mult*293 y_mult*353 x_mult*166 y_mult*23];
            app.CurrentlyloggedinLabel.Text = 'Currently logged in :';

            % Create SentinalLabel
            app.SentinalLabel = uilabel(app.LoginTab);
            app.SentinalLabel.FontSize = y_mult*18;
            app.SentinalLabel.Position = [x_mult*293 y_mult*298 x_mult*80 y_mult*23];
            app.SentinalLabel.Text = 'Sentinal :';

            % Create Cur_Log_in_Label_Val
            app.Cur_Log_in_Label_Val = uilabel(app.LoginTab);
            app.Cur_Log_in_Label_Val.Position = [x_mult*507 y_mult*353 x_mult*158 y_mult*22];
            app.Cur_Log_in_Label_Val.Text = 'NONE';
            app.Cur_Log_in_Label_Val.FontSize = 14*x_mult;


            % Create Sentinal_label_val
            app.Sentinal_label_val = uilabel(app.LoginTab);
            app.Sentinal_label_val.Position = [x_mult*507 y_mult*298 x_mult*151 y_mult*22];
            app.Sentinal_label_val.Text = 'NONE';
            app.Sentinal_label_val.FontSize = 14*x_mult; 


            % Create LevelLabel
            app.LevelLabel = uilabel(app.LoginTab);
            app.LevelLabel.FontSize = y_mult*18;
            app.LevelLabel.Position = [x_mult*293 y_mult*244 x_mult*53 y_mult*23];
            app.LevelLabel.Text = 'Level:';

            % Create Level_label_val
            app.Level_label_val = uilabel(app.LoginTab);
            app.Level_label_val.Position = [x_mult*510 y_mult*244 x_mult*155 y_mult*22];
            app.Level_label_val.Text = 'UNSET';
            app.Level_label_val.FontSize = y_mult*14;

            % Create TestSettingsTab
            app.TestSettingsTab = uitab(app.TabGroup);
            app.TestSettingsTab.Title = 'Test/Settings';


            % Create RunNewTestButton
            app.RunNewTestButton = uibutton(app.TestSettingsTab, 'push');
            app.RunNewTestButton.ButtonPushedFcn = createCallbackFcn(app, @RunNewTestButtonPushed, true);
            app.RunNewTestButton.FontSize = y_mult*36;
            app.RunNewTestButton.Position = [x_mult*45 y_mult*320 x_mult*253 y_mult*78];
            app.RunNewTestButton.Text = 'Run New Test';

            % Create LoadExistingDataButton
            app.LoadExistingDataButton = uibutton(app.TestSettingsTab, 'push');
            app.LoadExistingDataButton.ButtonPushedFcn = createCallbackFcn(app, @LoadExistingDataButtonPushed, true);
            app.LoadExistingDataButton.FontSize = y_mult*24;
            app.LoadExistingDataButton.Position = [x_mult*45 y_mult*253 x_mult*217 y_mult*39];
            app.LoadExistingDataButton.Text = 'Load Existing Data';

            % Create CurrentDataSetLabel
            app.CurrentDataSetLabel = uilabel(app.TestSettingsTab);
            app.CurrentDataSetLabel.Position = [x_mult*45 y_mult*168 x_mult*110 y_mult*22];
            app.CurrentDataSetLabel.Text = 'Current Data Set:';
            app.CurrentDataSetLabel.FontSize = x_mult*14;

            % Create TestDateandTimeLabel
            app.TestDateandTimeLabel = uilabel(app.TestSettingsTab);
            app.TestDateandTimeLabel.Position = [x_mult*45 y_mult*135 x_mult*130 y_mult*22];
            app.TestDateandTimeLabel.Text = 'Test Date and Time:';
            app.TestDateandTimeLabel.FontSize = x_mult*14;

            % Create NotesLabel
            app.NotesLabel = uilabel(app.TestSettingsTab);
            app.NotesLabel.Position = [x_mult*45 y_mult*84 x_mult*40 y_mult*22];
            app.NotesLabel.Text = 'Notes:';
            app.NotesLabel.FontSize = x_mult*14;

            % Create Cur_dat_set_val
            app.Cur_dat_set_val = uilabel(app.TestSettingsTab);
            app.Cur_dat_set_val.Position = [x_mult*179 y_mult*168 x_mult*480 y_mult*22];
            app.Cur_dat_set_val.Text = 'NONE';
            app.Cur_dat_set_val.FontSize = x_mult*14;

            % Create Test_DandT_val
            app.Test_DandT_val = uilabel(app.TestSettingsTab);
            app.Test_DandT_val.Position = [x_mult*179 y_mult*135 x_mult*468 y_mult*22];
            app.Test_DandT_val.Text = 'NONE';
            app.Test_DandT_val.FontSize = x_mult*14;

            % Create Notes_val
            app.Notes_val = uilabel(app.TestSettingsTab);
            app.Notes_val.Position = [x_mult*84 y_mult*12 x_mult*351 y_mult*94];
            app.Notes_val.Text = 'NONE';
            app.Notes_val.FontSize = x_mult*14;

            % Create ClearCurrentDataButton
            app.ClearCurrentDataButton = uibutton(app.TestSettingsTab, 'push');
            app.ClearCurrentDataButton.ButtonPushedFcn = createCallbackFcn(app, @ClearCurrentDataButtonPushed, true);
            app.ClearCurrentDataButton.FontSize = y_mult*24;
            app.ClearCurrentDataButton.Position = [x_mult*525 y_mult*30 x_mult*159 y_mult*76];
            app.ClearCurrentDataButton.Text = {'Clear Current'; 'Data'};

            % Create TestSettingsButton
            app.TestSettingsButton = uibutton(app.TestSettingsTab, 'push');
            app.TestSettingsButton.ButtonPushedFcn = createCallbackFcn(app, @TestSettingsButtonPushed, true);
            app.TestSettingsButton.FontSize = y_mult*18;
            app.TestSettingsButton.Position = [x_mult*525 y_mult*343 x_mult*164 y_mult*50];
            app.TestSettingsButton.Text = 'Test Settings';

            % Create GetTransducerDetailsButton
            app.GetTransducerDetailsButton = uibutton(app.TestSettingsTab, 'push');
            app.GetTransducerDetailsButton.ButtonPushedFcn = createCallbackFcn(app, @GetTransducerDetailsButtonPushed, true);
            app.GetTransducerDetailsButton.FontSize = y_mult*18;
            app.GetTransducerDetailsButton.Position = [x_mult*526 y_mult*270 x_mult*163 y_mult*52];
            app.GetTransducerDetailsButton.Text = {'Get Transducer '; 'Details'};

            % Create CheckProcessTab
            app.CheckProcessTab = uitab(app.TabGroup);
            app.CheckProcessTab.Title = 'Check/Process';

            % Create CheckSignalQualityButton
            app.CheckSignalQualityButton = uibutton(app.CheckProcessTab, 'push');
            app.CheckSignalQualityButton.ButtonPushedFcn = createCallbackFcn(app, @CheckSignalQualityButtonPushed, true);
            app.CheckSignalQualityButton.FontSize = y_mult*24;
            app.CheckSignalQualityButton.Position = [x_mult*37 y_mult*279 x_mult*174 y_mult*96];
            app.CheckSignalQualityButton.Text = {'Check Signal'; 'Quality'};

            % Create ProcessDataButton
            app.ProcessDataButton = uibutton(app.CheckProcessTab, 'push');
            app.ProcessDataButton.ButtonPushedFcn = createCallbackFcn(app, @ProcessDataButtonPushed, true);
            app.ProcessDataButton.FontSize = y_mult*36;
            app.ProcessDataButton.Position = [x_mult*37 y_mult*68 x_mult*233 y_mult*54];
            app.ProcessDataButton.Text = 'Process Data';

            % Create DisplaySNRMapsButton
            app.DisplaySNRMapsButton = uibutton(app.CheckProcessTab, 'push');
            app.DisplaySNRMapsButton.ButtonPushedFcn = createCallbackFcn(app, @DisplaySNRMapsButtonPushed, true);
            app.DisplaySNRMapsButton.FontSize = y_mult*14;
            app.DisplaySNRMapsButton.Position = [x_mult*544 y_mult*374 x_mult*175 y_mult*37];
            app.DisplaySNRMapsButton.Text = 'Display SNR++ Maps';

            % Create SNRSettingsButton
            app.SNRSettingsButton = uibutton(app.CheckProcessTab, 'push');
            app.SNRSettingsButton.ButtonPushedFcn = createCallbackFcn(app, @SNRSettingsButtonPushed, true);
            app.SNRSettingsButton.FontSize = y_mult*24;
            app.SNRSettingsButton.Position = [x_mult*43 y_mult*193 x_mult*169 y_mult*61];
            app.SNRSettingsButton.Text = 'SNR Settings';

            % Create DisplaySNRBarChartsButton
            app.DisplaySNRBarChartsButton = uibutton(app.CheckProcessTab, 'push');
            app.DisplaySNRBarChartsButton.ButtonPushedFcn = createCallbackFcn(app, @DisplaySNRBarChartsButtonPushed, true);
            app.DisplaySNRBarChartsButton.FontSize = y_mult*14;
            app.DisplaySNRBarChartsButton.Position = [x_mult*527 y_mult*309 x_mult*191 y_mult*37];
            app.DisplaySNRBarChartsButton.Text = 'Display SNR+++ Bar Charts';

            % Create ChanTimeandFreqViewerButton
            app.ChanTimeandFreqViewerButton = uibutton(app.CheckProcessTab, 'push');
            app.ChanTimeandFreqViewerButton.ButtonPushedFcn = createCallbackFcn(app, @ChanTimeandFreqViewerButtonPushed, true);
            app.ChanTimeandFreqViewerButton.FontSize = y_mult*14;
            app.ChanTimeandFreqViewerButton.Position = [x_mult*528 y_mult*253 x_mult*190 y_mult*37];
            app.ChanTimeandFreqViewerButton.Text = 'Chan Time and Freq Viewer';

            % Create SignalQualityIndicatorsButton
            app.SignalQualityIndicatorsButton = uibutton(app.CheckProcessTab, 'push');
            app.SignalQualityIndicatorsButton.ButtonPushedFcn = createCallbackFcn(app, @SignalQualityIndicatorsButtonPushed, true);
            app.SignalQualityIndicatorsButton.FontSize = y_mult*14;
            app.SignalQualityIndicatorsButton.Position = [x_mult*544 y_mult*193 x_mult*175 y_mult*37];
            app.SignalQualityIndicatorsButton.Text = 'Signal Quality Indicators';

            % Create ClearprocesseddataButton
            app.ClearprocesseddataButton = uibutton(app.CheckProcessTab, 'push');
            app.ClearprocesseddataButton.ButtonPushedFcn = createCallbackFcn(app, @ClearprocesseddataButtonPushed, true);
            app.ClearprocesseddataButton.Position = [x_mult*579 y_mult*12 x_mult*140 y_mult*33];
            app.ClearprocesseddataButton.Text = 'Clear processed data';

            % Create PredictionTab
            app.PredictionTab = uitab(app.TabGroup);
            app.PredictionTab.Title = 'Prediction';

            % Create SetPredictionOptionsButton
            app.SetPredictionOptionsButton = uibutton(app.PredictionTab, 'push');
            app.SetPredictionOptionsButton.ButtonPushedFcn = createCallbackFcn(app, @SetPredictionOptionsButtonPushed, true);
            app.SetPredictionOptionsButton.FontSize = y_mult*24;
            app.SetPredictionOptionsButton.Position = [x_mult*66 y_mult*321 x_mult*164 y_mult*67];
            app.SetPredictionOptionsButton.Text = {'Set Prediction'; 'Options'};

            % Create ModePairViewerFDButton
            app.ModePairViewerFDButton = uibutton(app.PredictionTab, 'push');
            app.ModePairViewerFDButton.ButtonPushedFcn = createCallbackFcn(app, @ModePairViewerFDButtonPushed, true);
            app.ModePairViewerFDButton.FontSize = y_mult*14;
            app.ModePairViewerFDButton.Position = [x_mult*562 y_mult*376 x_mult*171 y_mult*30];
            app.ModePairViewerFDButton.Text = 'Mode Pair Viewer (FD)';

            % Create PREDICTIONButton
            app.PREDICTIONButton = uibutton(app.PredictionTab, 'push');
            app.PREDICTIONButton.ButtonPushedFcn = createCallbackFcn(app, @PREDICTIONButtonPushed, true);
            app.PREDICTIONButton.FontSize = y_mult*36;
            app.PREDICTIONButton.Position = [x_mult*73 x_mult*132 x_mult*273 x_mult*86];
            app.PREDICTIONButton.Text = 'PREDICTION';

            % Create PredsButton
            app.PredsButton = uibutton(app.PredictionTab, 'push');
            app.PredsButton.ButtonPushedFcn = createCallbackFcn(app, @PredsButtonPushed, true);
            app.PredsButton.FontSize = y_mult*14;
            app.PredsButton.Position = [x_mult*562 y_mult*289 x_mult*171 y_mult*30];
            app.PredsButton.Text = '3 Preds';

            % Create MeanSTDmodesButton
            app.MeanSTDmodesButton = uibutton(app.PredictionTab, 'push');
            app.MeanSTDmodesButton.ButtonPushedFcn = createCallbackFcn(app, @MeanSTDmodesButtonPushed, true);
            app.MeanSTDmodesButton.FontSize = y_mult*14;
            app.MeanSTDmodesButton.Position = [x_mult*562 y_mult*320 x_mult*171 y_mult*30];
            app.MeanSTDmodesButton.Text = 'Mean/STD modes';

            % Create ViewModeMapButton
            app.ViewModeMapButton = uibutton(app.PredictionTab, 'push');
            app.ViewModeMapButton.ButtonPushedFcn = createCallbackFcn(app, @ViewModeMapButtonPushed, true);
            app.ViewModeMapButton.FontSize = y_mult*14;
            app.ViewModeMapButton.Position = [x_mult*562 y_mult*349 x_mult*171 y_mult*30];
            app.ViewModeMapButton.Text = 'View Mode Map';

            % Create ShowPeakFindButton
            app.ShowPeakFindButton = uibutton(app.PredictionTab, 'push');
            app.ShowPeakFindButton.ButtonPushedFcn = createCallbackFcn(app, @ShowPeakFindButtonPushed, true);
            app.ShowPeakFindButton.FontSize = y_mult*14;
            app.ShowPeakFindButton.Position = [x_mult*562 y_mult*256 x_mult*171 y_mult*30];
            app.ShowPeakFindButton.Text = 'Show Peak Find';

            % Create InteractiveMMViewerButton
            app.InteractiveMMViewerButton = uibutton(app.PredictionTab, 'push');
            app.InteractiveMMViewerButton.ButtonPushedFcn = createCallbackFcn(app, @InteractiveMMViewerButtonPushed, true);
            app.InteractiveMMViewerButton.FontSize = y_mult*14;
            app.InteractiveMMViewerButton.Position = [x_mult*567 y_mult*154 x_mult*166 y_mult*30];
            app.InteractiveMMViewerButton.Text = 'Interactive MM Viewer';

            % Create LogLikelyhoodTableButton
            app.LogLikelyhoodTableButton = uibutton(app.PredictionTab, 'push');
            app.LogLikelyhoodTableButton.ButtonPushedFcn = createCallbackFcn(app, @LogLikelyhoodTableButtonPushed, true);
            app.LogLikelyhoodTableButton.FontSize = y_mult*14;
            app.LogLikelyhoodTableButton.Position = [x_mult*567 y_mult*188 x_mult*166 y_mult*30];
            app.LogLikelyhoodTableButton.Text = 'Log Likelyhood Table';

            % Create DistanceMeanTableButton
            app.DistanceMeanTableButton = uibutton(app.PredictionTab, 'push');
            app.DistanceMeanTableButton.ButtonPushedFcn = createCallbackFcn(app, @DistanceMeanTableButtonPushed, true);
            app.DistanceMeanTableButton.FontSize = y_mult*14;
            app.DistanceMeanTableButton.Position = [x_mult*564 y_mult*223 x_mult*171 y_mult*30];
            app.DistanceMeanTableButton.Text = 'Distance/Mean Table';

            % Create ShowMeshButton
            app.ShowMeshButton = uibutton(app.PredictionTab, 'push');
            app.ShowMeshButton.ButtonPushedFcn = createCallbackFcn(app, @ShowMeshButtonPushed, true);
            app.ShowMeshButton.FontSize = y_mult*14;
            app.ShowMeshButton.Position = [x_mult*564 y_mult*5 x_mult*171 y_mult*30];
            app.ShowMeshButton.Text = 'Show Mesh';

            % Create ShowDispersionButton
            app.ShowDispersionButton = uibutton(app.PredictionTab, 'push');
            app.ShowDispersionButton.ButtonPushedFcn = createCallbackFcn(app, @ShowDispersionButtonPushed, true);
            app.ShowDispersionButton.FontSize = y_mult*14;
            app.ShowDispersionButton.Position = [x_mult*569 y_mult*39 x_mult*166 y_mult*30];
            app.ShowDispersionButton.Text = 'Show Dispersion';

            % Create PLampLabel
            app.PLampLabel = uilabel(app.PredictionTab);
            app.PLampLabel.HorizontalAlignment = 'right';
            app.PLampLabel.Position = [x_mult*382 y_mult*164 x_mult*25 y_mult*22];
            app.PLampLabel.Text = 'P:';
            app.PLampLabel.FontSize = 12 * x_mult;


            % Create PLamp
            app.PLamp = uilamp(app.PredictionTab);
            app.PLamp.Position = [x_mult*422 y_mult*164 x_mult*20 y_mult*20];
            app.PLamp.Color = [0.902 0.902 0.902];

            % Create ModeMapTagsButton
            app.ModeMapTagsButton = uibutton(app.PredictionTab, 'push');
            app.ModeMapTagsButton.ButtonPushedFcn = createCallbackFcn(app, @ModeMapTagsButtonPushed, true);
            app.ModeMapTagsButton.FontSize = y_mult*14;
            app.ModeMapTagsButton.Position = [x_mult*567 y_mult*121 x_mult*166 y_mult*30];
            app.ModeMapTagsButton.Text = 'Mode Map Tags';

            % Create ClearPredictionsButton
            app.ClearPredictionsButton = uibutton(app.PredictionTab, 'push');
            app.ClearPredictionsButton.ButtonPushedFcn = createCallbackFcn(app, @ClearPredictionsButtonPushed, true);
            app.ClearPredictionsButton.Position = [x_mult*428 y_mult*5 x_mult*119 y_mult*30];
            app.ClearPredictionsButton.Text = 'Clear Predictions';
            app.ClearPredictionsButton.FontSize = 14*y_mult;
            % Create MPRCvsTagButton
            app.MPRCvsTagButton = uibutton(app.PredictionTab, 'push');
            app.MPRCvsTagButton.ButtonPushedFcn = createCallbackFcn(app, @MPRCvsTagButtonPushed, true);
            app.MPRCvsTagButton.FontSize = y_mult*14;
            app.MPRCvsTagButton.Position = [x_mult*569 y_mult*84 x_mult*163 y_mult*30];
            app.MPRCvsTagButton.Text = 'MP RC vs Tag';

            % Create PeakLocationmmLabel
            app.PeakLocationmmLabel = uilabel(app.PredictionTab);
            app.PeakLocationmmLabel.Position = [x_mult*294 y_mult*100 x_mult*132 y_mult*22];
            app.PeakLocationmmLabel.Text = 'Peak Location (mm)';
            app.PeakLocationmmLabel.FontSize = 14* y_mult;
            % Create Label_PL
            app.Label_PL = uilabel(app.PredictionTab);
            app.Label_PL.Position = [x_mult*449 y_mult*100 x_mult*95 y_mult*22];
            app.Label_PL.Text = '**';
            app.Label_PL.FontSize = 12 * y_mult;
            
            % Create ProduceareportButton
            app.ProduceareportButton = uibutton(app.PredictionTab, 'push');
            app.ProduceareportButton.ButtonPushedFcn = createCallbackFcn(app, @ProduceareportButtonPushed, true);
            app.ProduceareportButton.Position = [x_mult*40 y_mult*12 x_mult*124 y_mult*46];
            app.ProduceareportButton.Text = 'Produce a report ';
            app.ProduceareportButton.FontSize = 14 * y_mult;


            % Create CONTACTWireTestLabel
            app.CONTACTWireTestLabel = uilabel(app.UIFigure);
            app.CONTACTWireTestLabel.FontSize = y_mult*30;
            app.CONTACTWireTestLabel.FontWeight = 'bold';
            app.CONTACTWireTestLabel.FontColor = [0 0 1];
            app.CONTACTWireTestLabel.Position = [x_mult*2 y_mult*515 x_mult*304 y_mult*39];
            app.CONTACTWireTestLabel.Text = 'CONTACT Wire- Test';

            % Create Program_version_label
            app.Program_version_label = uilabel(app.UIFigure);
            app.Program_version_label.FontWeight = 'bold';
            app.Program_version_label.Position = [x_mult*313 y_mult*515 x_mult*25 y_mult*22];
            app.Program_version_label.Text = '2.0';
            app.Program_version_label.FontSize = y_mult*12;

            % Create UserLabel
            app.UserLabel = uilabel(app.UIFigure);
            app.UserLabel.FontAngle = 'italic';
            app.UserLabel.Position = [x_mult*13 y_mult*36 x_mult*34 y_mult*22];
            app.UserLabel.Text = 'User:';
            app.UserLabel.FontSize = y_mult*12;
            
            % Create SentinalLabel_2
            app.SentinalLabel_2 = uilabel(app.UIFigure);
            app.SentinalLabel_2.FontAngle = 'italic';
            app.SentinalLabel_2.Position = [x_mult*13 y_mult*14 x_mult*52 y_mult*22];
            app.SentinalLabel_2.Text = 'Sentinal:';
            app.SentinalLabel_2.FontSize = y_mult*12;

            % Create LoginLampLabel
            app.LoginLampLabel = uilabel(app.UIFigure);
            app.LoginLampLabel.HorizontalAlignment = 'right';
            app.LoginLampLabel.Position = [x_mult*191 y_mult*28 x_mult*34 y_mult*22];
            app.LoginLampLabel.Text = 'Login';
            app.LoginLampLabel.FontSize =  12*y_mult ;
            % Create LoginLamp
            app.LoginLamp = uilamp(app.UIFigure);
            app.LoginLamp.Position = [x_mult*240 y_mult*28 x_mult*20 y_mult*20];

            % Create DataloadedLampLabel
            app.DataloadedLampLabel = uilabel(app.UIFigure);
            app.DataloadedLampLabel.HorizontalAlignment = 'right';
            app.DataloadedLampLabel.Position = [x_mult*306 y_mult*28 x_mult*70 y_mult*22];
            app.DataloadedLampLabel.Text = 'Data loaded';
            app.DataloadedLampLabel.FontSize = y_mult*12; 

            % Create DataloadedLamp
            app.DataloadedLamp = uilamp(app.UIFigure);
            app.DataloadedLamp.Position = [x_mult*391 y_mult*28 x_mult*20 y_mult*20];

            % Create CheckProcessLampLabel
            app.CheckProcessLampLabel = uilabel(app.UIFigure);
            app.CheckProcessLampLabel.HorizontalAlignment = 'right';
            app.CheckProcessLampLabel.Position = [x_mult*447 y_mult*27 x_mult*86 y_mult*22];
            app.CheckProcessLampLabel.Text = 'Check/Process';
            app.CheckProcessLampLabel.FontSize = y_mult*12;

            % Create CheckProcessLamp
            app.CheckProcessLamp = uilamp(app.UIFigure);
            app.CheckProcessLamp.Position = [x_mult*548 y_mult*27 x_mult*20 y_mult*20];

            % Create PredictionLampLabel
            app.PredictionLampLabel = uilabel(app.UIFigure);
            app.PredictionLampLabel.HorizontalAlignment = 'right';
            app.PredictionLampLabel.Position = [x_mult*592 y_mult*28 x_mult*58 y_mult*22];
            app.PredictionLampLabel.Text = 'Prediction';
            app.PredictionLampLabel.FontSize = y_mult*12; 

            % Create PredictionLamp
            app.PredictionLamp = uilamp(app.UIFigure);
            app.PredictionLamp.Position = [x_mult*665 y_mult*28 x_mult*20 y_mult*20];

            % Create USERLabel_val2
            app.USERLabel_val2 = uilabel(app.UIFigure);
            app.USERLabel_val2.FontAngle = 'italic';
            app.USERLabel_val2.Position = [x_mult*77 y_mult*36 x_mult*108 y_mult*22];
            app.USERLabel_val2.Text = 'None';
            app.USERLabel_val2.FontSize   =  12*y_mult ;

            % Create Sentinal_LabelVAL2
            app.Sentinal_LabelVAL2 = uilabel(app.UIFigure);
            app.Sentinal_LabelVAL2.FontAngle = 'italic';
            app.Sentinal_LabelVAL2.Position = [x_mult*77 y_mult*14 x_mult*108 y_mult*22];
            app.Sentinal_LabelVAL2.Text = 'None';
            app.Sentinal_LabelVAL2.FontSize   =  12*y_mult;

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
           

        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = WPA_V2

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end